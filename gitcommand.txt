# git 初期化
git init

# リモートリポジトリ取得
git clone <リポジトリのURLorSSH>

# clone等でエラーになったとき
# 下記でSSH用の秘密鍵・公開鍵を作成
# 公開鍵(初期だと「id_rsa.pub」の中身をgitのssh keyに登録する)
ssh-keygen -t rsa -b 4096 -C "登録メールアドレス"

# ステージ追加
git add　<ファイル名>
git add .

# リポジトリ登録
git commit
# メッセージ付き
git commit -m 'メッセージ'
# エディター起動らしい
git commit -v

# ワークツリーとステージ、ステージとリポジトリの変更ファイル表示
git status
# ワークツリーとステージの差分
git diff
# ステージとリポジトリの差分
git diff --staged

# 変更履歴を確認
git log
# 一行で表示
git log --oneline
# ファイルの変更差分を表示
git log -p index.html
# 表示するコミット数を制限する（最近から）
git log -n <コミット数>

# ファイルを削除
git rm <ファイル名>
# ディレクトリ削除
git rm -r <ディレクトリ名>
# ファイルは残すけどgitから削除
git rm --cached <ファイル名>

# ファイルを移動（ファイル名の変更）
# 内部的にはrm <旧ファイル名> add <新ファイル名>と同じ
git mv <旧ファイル名> <新ファイル名>

# リモートリポジトリを新規追加
# リモート名は基本originにする
# これはは慣用句のようなもの、cloneしたとき自動で割り当てられる
git remote add <リモート名> <URL>
git remote add origin https://github.com/haru0515/git.git
# リモートを間違えた場合
git remote rm <リモート名>
# 現在のリモート確認
git remote -v

# リモートリポジトリにアップ（プッシュ）
git push <リモート名> <ブランチ名>
git push origin master
# -u をつけると次回から git pushだけで origin masterをつけた状態と同じになる
git push -u origin master

# コマンドにエイリアスをつける
# commit を ci と打てば使えるようにする。以下省略
# configは設定　--globalはPC全体に反映させる（つけなきゃそのプロジェクトだけ）
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout

# バージョン管理したくないものの設定
# .gitignoreにファイルを記載する
# #から始まる行はコメント
# 指定したファイルを除外
index.html
# ルートディレクトリを指定
/root.html
/dir/test.html
# ディレクトリ以下を除外
dir/
# /以外の文字列にマッチ「*」
# 以下だと一つ階層を潜ったところにある.cssお除外
/*/*.css

# ファイルの変更を取り消す（ステージの情報に戻す）
# --を入れると明示的にブランチではないという指定になる
git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>
# 全変更を取り消す
git checkout -- .

# ステージの情報を最新リポジトリに戻す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>
git reset HEAD .
